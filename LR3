{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Добро пожаловать в Colaboratory!",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J-kFp63WLgVM"
      },
      "source": [
        "#**Домашнее задание**\n",
        "\n",
        "#**Задача 1**\n",
        "> Блок с отступами\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fzjQjeY2I4_s"
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from sklearn import datasets, linear_model\n",
        "from sklearn.datasets import load_diabetes\n"
      ],
      "execution_count": 62,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jEgtQv4UJAT1"
      },
      "source": [
        "y = np.array([12.19, 8.41, 14.68, 8.64, 32.94, 22.61, 45.92, 23.63, 18.59, 36.22, 50.10, 46.22, 23.63, 47.30, 40.03, 56.53, 38.41, 51.47, 6.29, 35.41, 67.79, 74.21, 79.12, 45.10])\n",
        "x = np.linspace(0, 1, num = 24)"
      ],
      "execution_count": 63,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9bSaxUVAK1Hw",
        "outputId": "04e706ba-bcd7-4604-fd1f-6b2479e743ae",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print(x)"
      ],
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.         0.04347826 0.08695652 0.13043478 0.17391304 0.2173913\n",
            " 0.26086957 0.30434783 0.34782609 0.39130435 0.43478261 0.47826087\n",
            " 0.52173913 0.56521739 0.60869565 0.65217391 0.69565217 0.73913043\n",
            " 0.7826087  0.82608696 0.86956522 0.91304348 0.95652174 1.        ]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7pkvekCFK1wu",
        "outputId": "34ac2cde-c689-41f3-9f68-2ea87bc54a67",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print(y)"
      ],
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[12.19  8.41 14.68  8.64 32.94 22.61 45.92 23.63 18.59 36.22 50.1  46.22\n",
            " 23.63 47.3  40.03 56.53 38.41 51.47  6.29 35.41 67.79 74.21 79.12 45.1 ]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qnbuXnrpJCZP",
        "outputId": "42fc81b8-bbe0-4bf0-a7b2-7f1bf4e6a13b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        }
      },
      "source": [
        "plt.scatter(x, y);"
      ],
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vrvvBOfXJE7B"
      },
      "source": [
        "X = list(zip(np.ones(24), x, x*x))"
      ],
      "execution_count": 68,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_k7WTnoyJJU6"
      },
      "source": [
        "W = np.linalg.lstsq(X, y, rcond=None)[0]"
      ],
      "execution_count": 69,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nPZFD52XJJz0",
        "outputId": "bb512777-915c-49bd-c45d-b1798b35b262",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "W"
      ],
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([12.1867    , 55.61441818, -9.10381818])"
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mYjLrENxJLyw"
      },
      "source": [
        "def f(x, w): \n",
        "    return w[0] + w[1]*x + w[2]*x*x"
      ],
      "execution_count": 71,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yvNM8uhKJNbg",
        "outputId": "9ca470e9-c899-476e-bb1a-eb0d53f77fdd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "f(x, W)"
      ],
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([12.1867    , 14.5875087 , 16.95389842, 19.28586917, 21.58342095,\n",
              "       23.84655375, 26.07526759, 28.26956245, 30.42943834, 32.55489526,\n",
              "       34.6459332 , 36.70255217, 38.72475217, 40.7125332 , 42.66589526,\n",
              "       44.58483834, 46.46936245, 48.31946759, 50.13515375, 51.91642095,\n",
              "       53.66326917, 55.37569842, 57.0537087 , 58.6973    ])"
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nR31lYl2JQLY",
        "outputId": "4d2ba1e8-0aa2-47f2-c690-1e4c20f02b0a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        }
      },
      "source": [
        "plt.scatter(x, y, label='train set')\n",
        "plt.plot(x, f(x, W), label='quad lstsq')\n",
        "plt.legend();"
      ],
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TYZ3Qm8BJV-k",
        "outputId": "f1ea1282-ec6f-4eea-f85b-4964a00fbce4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "from sklearn.metrics import mean_squared_error\n",
        "mean_squared_error(y, f(x, W))"
      ],
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "212.59353678557315"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oLO2tMffNJ7U"
      },
      "source": [
        "##Полином третьей степени"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yVGot0jrL9IW"
      },
      "source": [
        "from sklearn.preprocessing import PolynomialFeatures"
      ],
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oqFAzhmAM0AA"
      },
      "source": [
        "X = list(zip(np.ones(24), x, x*x, x*x*x))"
      ],
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "663tfF99M2ms"
      },
      "source": [
        "W = np.linalg.lstsq(X, y, rcond=None)[0]"
      ],
      "execution_count": 55,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EcPKzxJHM4ew",
        "outputId": "089e4e1b-0b2c-43db-ebe2-12fa40ee7622",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "W"
      ],
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([   5.65033333,  143.52996465, -233.63225758,  149.68562626])"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RaWQCc23M6al"
      },
      "source": [
        "def f(x, w): \n",
        "    return w[0] + w[1]*x + w[2]*x*x + w[3]*x*x*x"
      ],
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BkVrRljZM9Th",
        "outputId": "71c7ba5b-73f7-462a-b3f6-f3e19028f6c5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "f(x, W)"
      ],
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 5.65033333, 11.46142029, 16.46302503, 20.72896311, 24.33305007,\n",
              "       27.34910145, 29.85093281, 31.91235968, 33.60719763, 35.00926219,\n",
              "       36.19236891, 37.23033333, 38.19697101, 39.1660975 , 40.21152833,\n",
              "       41.40707905, 42.82656522, 44.54380237, 46.63260606, 49.16679183,\n",
              "       52.22017523, 55.86657181, 60.1797971 , 65.23366667])"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UAOAEIRkNACO"
      },
      "source": [
        "plt.scatter(x, y, label='train set')\n",
        "plt.plot(x, f(x, W), label='quad lstsq')\n",
        "plt.legend();"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FSHgivkhNG8v"
      },
      "source": [
        "from sklearn.metrics import mean_squared_error"
      ],
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Xr6Ut2AqNHcw",
        "outputId": "6d2470c4-0321-4ce3-f8f3-3812aa3e748c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "mean_squared_error(y, f(x, W))"
      ],
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "202.513036590909"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XzmvuaVONxbV"
      },
      "source": [
        "##Экспонента"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "flQRMFidNz1-"
      },
      "source": [
        "X = list(zip(np.ones(24), np.exp(x)))"
      ],
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QO321IhSN1bS"
      },
      "source": [
        "W = np.linalg.lstsq(X, y, rcond=None)[0]"
      ],
      "execution_count": 76,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T63xEUHgN3sY",
        "outputId": "4be5d243-0f42-4c9f-ab2d-d478bf6db2d1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "W"
      ],
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-9.42279902, 26.85911292])"
            ]
          },
          "metadata": {},
          "execution_count": 77
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LkiNTo9RZjch"
      },
      "source": [
        "def f(x, w): \n",
        "    return w[0] + w[1]*np.exp(x)"
      ],
      "execution_count": 79,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hR350V3mZkqb",
        "outputId": "d2f829e6-6483-43d2-e8ee-edcb6979bc9f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "f(x, W)"
      ],
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([17.43631391, 18.62986007, 19.87644418, 21.17842312, 22.53825847,\n",
              "       23.95852121, 25.44189658, 26.99118913, 28.60932804, 30.29937266,\n",
              "       32.06451828, 33.90810219, 35.83360996, 37.84468208, 39.9451208 ,\n",
              "       42.13889731, 44.43015931, 46.82323878, 49.32266021, 51.93314915,\n",
              "       54.65964115, 57.50729105, 60.4814828 , 63.58783957])"
            ]
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sh5RDrJxN5aq",
        "outputId": "64188d07-d290-4bb3-9b3e-334c2caec442",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        }
      },
      "source": [
        "plt.scatter(x, y, label='train set')\n",
        "plt.plot(x, f(x, W), label='quad lstsq')\n",
        "plt.legend();"
      ],
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rXnrVSpLN7aG",
        "outputId": "65e85f63-e093-42af-c019-a097bc35f2eb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "mean_squared_error(y, f(x, W))"
      ],
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "218.24309186403494"
            ]
          },
          "metadata": {},
          "execution_count": 82
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z0yXYhpXL5LW"
      },
      "source": [
        "#**Задача 2**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LgMtAmBwPPg6"
      },
      "source": [
        "LinearRegression"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "71MPdjOWQLy1"
      },
      "source": [
        "diabetes_X, diabetes_y = datasets.load_diabetes(return_X_y=True)\n",
        "diabetes_X = diabetes_X[:, np.newaxis, 2]"
      ],
      "execution_count": 84,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fvDCYB3UQR5E"
      },
      "source": [
        "X_train = diabetes_X[:-100]\n",
        "y_train = diabetes_y[:-100]"
      ],
      "execution_count": 85,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e0JEz3LYQU4I",
        "outputId": "5ad4c593-0f94-4cdb-ebdb-9f05354df7cd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "regr = linear_model.LinearRegression()\n",
        "regr.fit(X_train, y_train)"
      ],
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
            ]
          },
          "metadata": {},
          "execution_count": 86
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WAPNunx6QbZL"
      },
      "source": [
        "X_test = diabetes_X[-100:]\n",
        "y_test = diabetes_y[-100:]\n",
        "y_pred = regr.predict(X_test)"
      ],
      "execution_count": 87,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Tfi7fDPuQnAd",
        "outputId": "bf846509-6f79-4c54-af78-987e3da0a78c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print(regr.coef_)"
      ],
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[953.3606272]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PY2LumCWQsOV",
        "outputId": "a9bf51e4-2c3b-40a2-ee9b-e22209c08c61",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print(r2_score(y_test, y_pred))"
      ],
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.3804087960385918\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "culV1qDeQuiA",
        "outputId": "eeb19b2c-5f7f-4dfa-d733-1b91d9c408e4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "mean_squared_error(y_test, y_pred)"
      ],
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3752.769434735645"
            ]
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6ySaAdd_Qunf",
        "outputId": "ad6b753e-a52a-47b9-ce27-850f17102b92",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        }
      },
      "source": [
        "plt.scatter(X_test, y_test)\n",
        "plt.plot(X_test, y_pred, linewidth=3)\n",
        "plt.show()"
      ],
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n5jHfr9APRCR"
      },
      "source": [
        "Ridge"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r3Mmizg5Rk7q",
        "outputId": "23a4fd49-42dd-4efe-eb8b-b8a7b74372e0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "ridge = linear_model.Ridge(alpha=1.5)\n",
        "ridge.fit(X_train,y_train)"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Ridge(alpha=1.5, copy_X=True, fit_intercept=True, max_iter=None,\n",
              "      normalize=False, random_state=None, solver='auto', tol=0.001)"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BOzhbaD5RuIN"
      },
      "source": [
        "y_pred = ridge.predict(X_test)"
      ],
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PqeohKZFR40s",
        "outputId": "de30f097-4024-4473-c8cd-aa89b732ca9e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "mean_squared_error(y_test,y_pred)"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4771.116515196345"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BatEEydCScPU"
      },
      "source": [
        "W=r2_score(y_test,y_pred)"
      ],
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NG45SUXYSdpv",
        "outputId": "c2ade923-9725-4518-c4c8-f7e623acccb5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "W"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.21227725888816829"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pbhPkm8cSsyy",
        "outputId": "dfc7220c-9a70-42db-bf6e-912cfe862239",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        }
      },
      "source": [
        "plt.scatter(X_test, y_test)\n",
        "plt.plot(X_test, y_pred, linewidth=3)\n",
        "plt.show()"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vMKEjj_kPTMf"
      },
      "source": [
        "Lasso"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "j5j7-rB4SmLX",
        "outputId": "07cd695b-4d1f-4975-ce37-6c933ef4eb0e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "lasso = linear_model.Lasso(alpha=1.1)\n",
        "lasso.fit(X_train, y_train)"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Lasso(alpha=1.1, copy_X=True, fit_intercept=True, max_iter=1000,\n",
              "      normalize=False, positive=False, precompute=False, random_state=None,\n",
              "      selection='cyclic', tol=0.0001, warm_start=False)"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yYwjvst4XmPQ"
      },
      "source": [
        "y_pred = lasso.predict(X_test)"
      ],
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6TaiDxdPXp3K",
        "outputId": "4d2a2295-117c-42f2-a6b3-d019049d0826",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "mean_squared_error(y_test,y_pred)"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4392.470405968104"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Z6HEpFnuX75G"
      },
      "source": [
        "W=r2_score(y_test,y_pred)"
      ],
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gCg21ropX9Ft",
        "outputId": "9f7b0fef-9d3f-4395-ea8a-ff8ab6e064a1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "W"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.27479263660376063"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cxBVC8e9YGT3",
        "outputId": "a501e2bc-1e41-4a08-9e8d-2f764fb8817e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        }
      },
      "source": [
        "plt.scatter(X_test, y_test)\n",
        "plt.plot(X_test, y_pred, linewidth=3)\n",
        "plt.show()"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_8-ksUXWPU_x"
      },
      "source": [
        "ElasticNet"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YAHoQ7fMYODp",
        "outputId": "b7df290c-c0d5-4357-9300-ff83413cae20",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "elasticNet = linear_model.ElasticNet(l1_ratio=0.9, alpha=.1)\n",
        "elasticNet.fit(X_train, y_train)"
      ],
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ElasticNet(alpha=0.1, copy_X=True, fit_intercept=True, l1_ratio=0.9,\n",
              "           max_iter=1000, normalize=False, positive=False, precompute=False,\n",
              "           random_state=None, selection='cyclic', tol=0.0001, warm_start=False)"
            ]
          },
          "metadata": {},
          "execution_count": 92
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4LeRBiu_YSI8"
      },
      "source": [
        "y_pred = elasticNet.predict(X_test)"
      ],
      "execution_count": 93,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5JTIkIw-YZ0X",
        "outputId": "40b1f31e-f419-4fbf-c649-df29f98b578a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "mean_squared_error(y_test,y_pred)"
      ],
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5330.532029499825"
            ]
          },
          "metadata": {},
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0vyPNOaCYlBV"
      },
      "source": [
        "W=r2_score(y_test,y_pred)"
      ],
      "execution_count": 95,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IniyU4EMYlcv",
        "outputId": "5041c80f-3d2c-4d8c-fc76-bdcd25bbceb3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "W"
      ],
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.11991642029953287"
            ]
          },
          "metadata": {},
          "execution_count": 96
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YgngkihzY7rc",
        "outputId": "02df3f55-e52c-4355-e43b-1fbfc6775e49",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        }
      },
      "source": [
        "plt.scatter(X_test, y_test)\n",
        "plt.plot(X_test, y_pred,linewidth=3)\n",
        "plt.show()"
      ],
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_SEMF-GBaTNb"
      },
      "source": [
        "Вывод: в ходе выполнения работы, сравнивая значения mean_squared_error(), можно выделить два полученных результата: ElasticNet с наибольшим значением *~*5330 и LinearRegression с наименьшим *~*3752. Lasso и Ridge показали средние значения (~4392 и ~4771 соответственно)\n"
      ]
    }
  ]
}